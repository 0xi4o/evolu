import { createHooks, getOwner, model, resetOwner, restoreOwner } from "evolu";

// Create TodoId type for run-time and build-time validations.
// Evolu uses https://github.com/colinhacks/zod#brand
const TodoId = model.id<"todo">();
type TodoId = model.infer<typeof TodoId>;

// Create React Hooks and define DB schema.
// You can add tables and columns anytime later.
const { useQuery, useMutation } = createHooks({
  todo: {
    id: TodoId,
    // Instead of plain strings or numbers, we use Zod branded types.
    // It's excellent for DX. Evolu defines some common types for you.
    title: model.NonEmptyString1000,
    // SQLite has no Boolean datatype so we emulate it.
    isCompleted: model.SqliteBoolean,
  },
});

export default function Index() {
  // This SQL query is typed thanks to https://github.com/koskimas/kysely.
  // Note every table has four auto-generated columns:
  //  createdAt: SqliteDateTime
  //  createdBy: OwnerId
  //  updatedAt: SqliteDateTime
  //  isDeleted: SqliteBoolean
  const { rows } = useQuery((db) =>
    db
      .selectFrom("todo")
      .select(["id", "title", "isCompleted", "updatedAt"])
      // model.cast is a helper for types not supported by SQLite.
      .where("isDeleted", "is not", model.cast(true))
      .orderBy("createdAt")
  );

  const { mutate } = useMutation();

  const handleAddTodoClick = () => {
    // Every Zod branded types is a validator.
    const title = model.NonEmptyString1000.safeParse(
      prompt("What needs to be done?")
    );
    if (!title.success) {
      alert(JSON.stringify(title.error, null, 2));
      return;
    }
    // Add new todo. Note that UI is updated automatically.
    // While we have full SQL queries, mutations are pretty limited.
    // That's because of CRDT (conflict-free replicated data type).
    // CRDT allows Evolu to sync data without conclicts.
    mutate("todo", { title: title.data });
  };

  const handleShowMnemonic = () => {
    getOwner().then((owner) => {
      // Mnemonic is your safe password for backup and sync.
      // It's safe because it's long and autogenerated.
      // Evolu is not only local but also private first software.
      // All you data are encrypted with OpenPGP, the same ProtonMail uses.
      alert(owner.mnemonic);
    });
  };

  const handleResetOwner = () => {
    if (confirm("Are you sure? It will delete all your local data."))
      resetOwner();
  };

  const handleRestoreOwner = () => {
    const mnemonic = prompt("Your Mnemonic");
    if (mnemonic == null) return;
    const either = restoreOwner(mnemonic);
    if (either._tag === "Left") alert(JSON.stringify(either.left, null, 2));
  };

  return (
    <div>
      <h1>Evolu TodoMVC</h1>
      <ul>
        {rows.map(({ id, title, isCompleted }) => (
          <li key={id}>
            <p
              style={{ textDecoration: isCompleted ? "line-through" : "none" }}
            >
              {title}
            </p>
            <button
              onClick={() => {
                mutate("todo", { id, isCompleted: !isCompleted });
              }}
            >
              {isCompleted ? "completed" : "complete"}
            </button>
            <button
              onClick={() => {
                const newTitle = model.NonEmptyString1000.safeParse(
                  prompt("What needs to be done?", title || "")
                );
                if (!newTitle.success) {
                  alert(JSON.stringify(newTitle.error, null, 2));
                  return;
                }
                mutate("todo", { id, title: newTitle.data });
              }}
            >
              rename
            </button>
            <button
              onClick={() => {
                mutate("todo", { id, isDeleted: true });
              }}
            >
              delete
            </button>
          </li>
        ))}
      </ul>
      <p>
        <button onClick={handleAddTodoClick}>Add Todo</button>
      </p>
      <p>
        <button onClick={handleShowMnemonic}>Show Mnemonic</button>
        <button onClick={handleResetOwner}>Reset Owner</button>
        <button onClick={handleRestoreOwner}>Restore Owner</button>
      </p>
      <p>Mnemonic is your safe password generated by Evolu.</p>
      <p>
        Open this page in a different browser (not a tab) or a device, and use
        your mnemonic to restore your data.
      </p>
      <p>Isn't it beautiful?</p>
    </div>
  );
}
